---
title: "QABot for Python Shiny"
author: "<br><br><br><strong>Deepsha Menghani</strong><br>"
execute: 
  echo: true
format: 
  revealjs:
    width: 1600
    height: 900
    theme: "style.scss"
    highlight-style: vim-dark
    code-overflow: wrap
    # footer: "[{{< fa solid display >}}  github.com/deepshamenghani/shinypython_meetup](https://github.com/deepshamenghani/shinypython_meetup) [{{< fa brands mastodon >}} @deepshamenghani](https://fosstodon.org/@deepsha)"
    link-external-newwindow: true
    df-print: kable
from: markdown+emoji
---

## Who am I

::::: columns
::: {.column width="50%"}
Data Scientist manager at Microsoft.....

![](images/DeepshaMenghani.png){width="75%" fig-align="center" fig-alt="Self portrait."}
:::

::: {.column width="50%"}
:::
:::::

## The biggest career transition of my life!

::::: columns
::: {.column width="50%"}
DS manager at Microsoft.....

![](images/DeepshaMenghani.png){width="75%" fig-align="center" fig-alt="Self portrait."}
:::

::: {.column width="50%"}
And a parent as of this year!

![](images/fam.jpg){width="70%" fig-align="center" fig-alt="Deepsha's puppy and baby hanging."}
:::
:::::

# Let's talk Shiny

## Shiny: Started with R and now we Pythoning!

[*https://shiny.posit.co/py/*](https://shiny.posit.co/py/) <br><br>

![](images/shinypython.png){width="80%" fig-align="center" fig-alt="Shiny python dashboard example"}

# Who here has heard about ChatGPT?

# 

![](images/chatgptsun_gif.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}

## Let's imagine such a chatbot in our Shiny application

::::: columns
::: {.column width="50%"}
![](images/shinyapp.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::

::: {.column width="50%"}
:::
:::::

## Steps to build it

:::::: columns
::: {.column width="50%"}
![](images/shinyapp.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::

:::: {.column width="50%"}
::: incremental
1.  Set up the Python environment
2.  Create an OpenAI account
3.  Build the chatbot
4.  Develop the application
:::
::::
::::::

# 1. Set up the Python environment

## Setting up environment

<br>

::: incremental
1.  Create a virtual environment for your project (just best practice)
2.  Install the required packages 
    ```{md}
    pip install shiny openai python-dotenv
    ```
3. Install Shiny for Python extension (For VSCode)

:::

# 2. Create an OpenAI account

## Create an account

Go to https://platform.openai.com/

![](images/openai_platform.png){width="100%" fig-align="center" fig-alt="Sopen ai platform"}

## Get the API key

![](images/openai_apikeypage.png){width="100%" fig-align="center" fig-alt="openai api key"}

## 

![](images/guard-this-shit-with-your-life-always-do.gif){width="100%" fig-align="center" fig-alt="guard it"}

## Safeguard API key

<br>

::: {.fragment}
*env file* <br>

```{md}
OPENAI_API_KEY = "sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```
:::

<hr>

::: {.fragment}
*gitignore file* <br>

```{md}
.env
```
:::

<hr>

::: {.fragment}
*python file* <br>

```{python eval=FALSE}
#| code-line-numbers: "|1-3|4"
import os
import dotenv

dotenv.load_dotenv()
api_key=os.getenv('OPENAI_API_KEY')
```
:::

# 3. Build the chatbot

## Connect with OpenAI client

<br>

::: {.fragment}
*conversationchatbot.py file* <br>

```{python eval=FALSE}
#| code-line-numbers: "|1|6"
from openai import OpenAI
import os
import dotenv

dotenv.load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
```
:::

## Build the conversation input for OpenAI call

::: {.fragment}
::: {.incremental}
Conversation input consists of two parts: 

1.  The role of the chatbot (character + personality)
2.  The ongoing conversation triggered by the user
:::
:::

## Build the conversation input for OpenAI call


::: {.fragment}
*Assign a role to the chatbot* <br>

```{python eval=FALSE}
conversation = [{"role": "system", "content": "You are an assistant."}]
```
:::

::: {.fragment}
![](images/print_convo_role.png){width="100%" fig-align="left" fig-alt="guard it"}

:::


::: {.fragment}
*Update the conversation to include the user question* <br>

```{python eval=FALSE}
#| code-line-numbers: "1|2|"
inputquestion = "Where is the moon?"
conversation.append({"role": "user", "content": inputquestion})
```
:::

::: {.fragment}
![](images/print_convo_user.png){width="100%" fig-align="left" fig-alt="guard it"}

:::


## Send API call with conversation context to get response

::: {.fragment}

*Chat completion format* <br>

```{python eval=FALSE}
#| code-line-numbers: "|1|2|3|"
response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=conversation
    )
```

:::

::: {.fragment}

```{python eval=FALSE}
print(f"{response}")
```

:::
<br>

::: {.fragment}

*Pull out the response content* <br>

```{python eval=FALSE}
assistant_response = response.choices[0].message.content
```

:::
::: {.fragment}

```{python eval=FALSE}
print(f"{assistant_response}")
```

:::

## Turn the API call into a function

::: {.fragment}


```{python eval=FALSE}
#| code-line-numbers: "|1-3|5-6|8-9|11|12-13|15-19|21-22|24"
from openai import OpenAI
import os
import dotenv

dotenv.load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API'))

# Create a role instruction for the bot
conversation = [{"role": "system", "content": "You are an assistant."}]

def ask_question(inputquestion):
    # Append the user's question to the conversation array
    conversation.append({"role": "user","content": inputquestion})

    # Request gpt-3.5-turbo for chat completion or a response
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=conversation
    )

    # Access the response from the API to display it
    assistant_response = response.choices[0].message.content
    
    return assistant_response

```

:::

## Turn the API call into a function

::: {.fragment}

```{python eval=FALSE}
ask_question("Where is the moon?")
```

:::

## Connect with OpenAI client

<br>

::: {.fragment}
*conversationchatbot.py file* <br>

```{python eval=FALSE}
#| code-line-numbers: "|1|6"
from openai import OpenAI
import os
import dotenv

dotenv.load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
```

:::

