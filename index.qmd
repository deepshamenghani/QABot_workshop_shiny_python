---
title: "QABot for Python Shiny"
author: "<br><br><br><strong>Deepsha Menghani</strong><br>"
execute: 
  echo: true
  eval: false
format: 
  revealjs:
    width: 1600
    height: 900
    theme: "style.scss"
    highlight-style: vim-dark
    code-overflow: wrap
    # footer: "[{{< fa solid display >}}  github.com/deepshamenghani/shinypython_meetup](https://github.com/deepshamenghani/shinypython_meetup) [{{< fa brands mastodon >}} @deepshamenghani](https://fosstodon.org/@deepsha)"
    link-external-newwindow: true
    df-print: kable
from: markdown+emoji
---

## Who am I

::::: columns
::: {.column width="50%"}
Data Scientist manager at Microsoft.....

![](images/DeepshaMenghani.png){width="75%" fig-align="center" fig-alt="Self portrait."}
:::

::: {.column width="50%"}
:::
:::::

## The biggest career transition of my life!

::::: columns
::: {.column width="50%"}
DS manager at Microsoft.....

![](images/DeepshaMenghani.png){width="75%" fig-align="center" fig-alt="Self portrait."}
:::

::: {.column width="50%"}
And a parent as of this year!

![](images/fam.jpg){width="70%" fig-align="center" fig-alt="Deepsha's puppy and baby hanging."}
:::
:::::

# Let's talk Shiny

## Shiny: Started with R and now we Pythoning!

[*https://shiny.posit.co/py/*](https://shiny.posit.co/py/) <br><br>

![](images/shinypython.png){width="80%" fig-align="center" fig-alt="Shiny python dashboard example"}

# Who here has heard about ChatGPT?

# 

![](images/chatgptsun_gif.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}

## How does it do that? 


::: {.fragment}

### To understand that, think of my 7 month old as a Generative AI system

![](images/mybaby.jpg){width="30%" fig-align="center" fig-alt="my baby"}

:::

## How does it do that? 


### To understand that, think of my 7 month old as a Generative AI system

<br>

![](images/twinkletwinkle.png){width="100%" fig-align="center" fig-alt="twinkle twinkle"}

## Imagine such a tool inside our Shiny application

::::: columns
::: {.column width="50%"}
![](images/shinyapp.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::

::: {.column width="50%"}
:::
:::::

## Steps to build it

:::::: columns
::: {.column width="50%"}
![](images/shinyapp.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::

:::: {.column width="50%"}
::: incremental
1.  Set up the Python environment
2.  Create an OpenAI account
3.  Build the chatbot
4.  Develop the application
:::
::::
::::::

# 1. Set up the Python environment

## Setting up environment

<br>

::: incremental
1.  Create a virtual environment for your project (just best practice)
2.  Install the required packages 
    ```{md}
    pip install shiny openai python-dotenv
    ```
3. Install Shiny for Python extension (For VSCode)

:::

# 2. Create an OpenAI account

## Create an account

Go to [https://platform.openai.com/](https://platform.openai.com/)

![](images/openai_platform.png){width="100%" fig-align="center" fig-alt="Sopen ai platform"}

## Get the API key

![](images/openai_apikeypage.png){width="100%" fig-align="center" fig-alt="openai api key"}

## 

![](images/guard-this-shit-with-your-life-always-do.gif){width="100%" fig-align="center" fig-alt="guard it"}

## Safeguard API key

<br>

::: {.fragment}
*env file* <br>

```{md}
OPENAI_API_KEY = "sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```
:::

<hr>

::: {.fragment}
*gitignore file* <br>

```{md}
.env
```
:::

<hr>

::: {.fragment}
*Access it from your python file* <br>

```{python}
#| code-line-numbers: "|1-2|4|5|"
import os
import dotenv

dotenv.load_dotenv()
api_key=os.getenv('OPENAI_API_KEY')
```
:::

# 3. Build the chatbot

*conversationchatbot.py file* <br>

## Connect with OpenAI client

<br>

::: {.fragment}
*conversationchatbot.py file* <br>

```{python}
#| code-line-numbers: "|1|2-5|6|"
from openai import OpenAI
import os
import dotenv

dotenv.load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
```
:::

## Build the conversation input for OpenAI call

::: {.fragment}
::: {.incremental}
Conversation input consists of: 

1.  The role of the chatbot (character + personality)
2.  The question input by the user
3.  The entire ongoing conversation thus far + the next question

:::
:::

::: {.fragment}
![](images/openaisendreceive.png){width="100%" fig-align="left" fig-alt="guard it"}

:::



## Build the conversation input for OpenAI call

::: {.fragment}
![](images/openaisendreceive.png){width="70%" fig-align="left" fig-alt="guard it"}

:::

::: {.fragment}

```{python}
conversation = [{"role": "system", "content": "You are an assistant."}]
```
:::

::: {.fragment}
![](images/print_convo_role.png){width="70%" fig-align="left" fig-alt="guard it"}

:::

::: {.fragment}

```{python}
#| code-line-numbers: "1|2|"
inputquestion = "Where is the moon?"
conversation.append({"role": "user", "content": inputquestion})
```
:::

::: {.fragment}
![](images/print_convo_user.png){width="70%" fig-align="left" fig-alt="guard it"}

:::


## Send API call with conversation context to get response

::: {.fragment}

*Chat completion format* <br>

```{python}
#| code-line-numbers: "|1|2|3|"
response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=conversation
    )
```

:::

::: {.fragment}

:::{.callout-caution title="response"}
ChatCompletion(id='chatcmpl-9uUJ1QzCnQP7tPji48AIal9LQ8Fpe', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content="The moon is currently in the sky, but its precise location will depend on your specific location and the time of day. If you would like to know the moon's current phase or position in the sky for your location, you can use a moon tracking app or website.", refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1723249891, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=54, prompt_tokens=21, total_tokens=75))
:::

:::

## Send API call with conversation context to get response


*Pull out the response content* <br>

```{python}
assistant_response = response.choices[0].message.content
```

::: {.fragment}

:::{.callout-tip title="assistant_response"}
"The moon is currently in the sky, but its precise location will depend on your specific location and the time of day. If you would like to know the moon's current phase or position in the sky for your location, you can use a moon tracking app or website."
:::

:::

## Turn the API call into a function

::: {.fragment}


```{python}
#| code-line-numbers: "|1-3|5-6|8-9|11|12-13|15-19|21-22|24|11-24|"
from openai import OpenAI
import os
import dotenv

dotenv.load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API'))

# Create a role instruction for the bot
conversation = [{"role": "system", "content": "You are an assistant."}]

def ask_question(inputquestion):
    # Append the user's question to the conversation array
    conversation.append({"role": "user","content": inputquestion})

    # Request gpt-3.5-turbo for chat completion or a response
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=conversation
    )

    # Access the response from the API to display it
    assistant_response = response.choices[0].message.content
    
    return assistant_response

```

:::

## Turn the API call into a function
*conversationchatbot.py file* <br>

::: {.fragment}

```{python}
ask_question("Where is the moon?")
```

:::


::: {.fragment}

:::{.callout-tip title="function output"}
"The moon is currently in the sky, but its precise location will depend on your specific location and the time of day. If you would like to know the moon's current phase or position in the sky for your location, you can use a moon tracking app or website."
:::

:::


# Let's create the Shiny application to serve this bot

## The basic app commands and structure to get started
::: columns
::: {.column width="35%"}
::: fragment
*Shiny create - -help* <br><br>
:::
:::

::: {.column width="65%"}
::: fragment
![](images/shinycreatehelp.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::
:::

## The code structure of a basic app

::: columns
::: {.column width="50%"}
*Shiny create -t basic-app* <br>

```{python}
#| code-line-numbers: "|1|3-7|9-12|14"
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.panel_title("Hello Shiny!"),
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"

app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](images/appbasic.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

# Let's update the Shiny App for our QA bot

## Add a title


::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "|5-6"
from shiny import App, render, ui

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot")
    )
)

def server(input, output, session):
    @render.text
    def txt():
        return ""

app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](images/shinytitle.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## Make the title pretty

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "5-6"
from shiny import App, render, ui

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
    )
)

def server(input, output, session):
    @render.text
    def txt():
        return ""

app = App(app_ui, server)


```
:::

::: {.column width="50%"}

<br>
![](images/shinytitlestyled.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## Add a description

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "7-8"
from shiny import App, render, ui

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
    )
)

def server(input, output, session):
    @render.text
    def txt():
        return ""

app = App(app_ui, server)
```
:::

::: {.column width="50%"}

<br>
![](images/shinydesc){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::


## Add a box for user to input question

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "9-10"
from shiny import App, render, ui

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
        # Text input for user to enter their question
        ui.input_text("question_input", "Please enter your question and press 'Send':", width="100%"),
    )
)

def server(input, output, session):
    @render.text
    def txt():
        return ""

app = App(app_ui, server)
```
:::

::: {.column width="50%"}

<br>
![](images/shinyuserinput.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::



## Add a send button

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "11-12"
from shiny import App, render, ui

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
        # Text input for user to enter their question
        ui.input_text("question_input", "Please enter your question and press 'Send':", width="100%"),
        # Button to send the question
        ui.input_action_button("send_button", "Send", class_="btn-primary"),    
    )
)

def server(input, output, session):
    @render.text
    def txt():
        return ""

app = App(app_ui, server)
```
:::

::: {.column width="50%"}

<br>
![](images/shinysendbutton.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## Add an area for the answer to appear

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "13-17|"
from shiny import App, render, ui

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
        # Text input for user to enter their question
        ui.input_text("question_input", "Please enter your question and press 'Send':", width="100%"),
        # Button to send the question
        ui.input_action_button("send_button", "Send", class_="btn-primary"), 
        # Card to display the answer
        ui.card(
            ui.output_text("answer_output", inline=True),
            style="white-space: pre-wrap; width: 100%; margin: 3; padding: 10px;"
        )   
    )
)

def server(input, output, session):
    @render.text
    def txt():
        return ""

app = App(app_ui, server)
```
:::

::: {.column width="50%"}

<br>
![](images/shinyanswerarea.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::


## Update the server to get response from OpenAI

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "|1|2|22-36|25|25-26|25-27|25-29|25-36"
from shiny import App, render, ui, reactive
import conversationchatbot  

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
        # Text input for user to enter their question
        ui.input_text("question_input", "Please enter your question and press 'Send':", width="100%"),
        # Button to send the question
        ui.input_action_button("send_button", "Send", class_="btn-primary"), 
        # Card to display the answer
        ui.card(
            ui.output_text("answer_output", inline=True),
            style="white-space: pre-wrap; width: 100%; margin: 3; padding: 10px;"
        )   
    )
)

def server(input, output, session):
    # Define the output for the answer
    @output
    @render.text
    @reactive.event(input.send_button, ignore_none=False)
    def answer_output():
        # Get the user's question from the input
        question = input.question_input()
        if question:
            # Get the response from the conversational AI model using the provided API key
            response = conversationchatbot.ask_question(question)
            return response
        else:
            # Return placeholder text if no question is entered
            return "....."

app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](images/shinyquestionanswer_gif.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

# The chatbot is ready and served through our shiny application. You did it!

# Now, let's have the user input their API key in the Shiny dashboard

## Update conversation chatbot function
::: {.fragment}

### Original function with user question input as parameter

```{python}
#| code-line-numbers: "|1-3|5-6|8-9|11|12-13|15-19|21-22|24"
from openai import OpenAI
import os
import dotenv

dotenv.load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API'))

# Create a role instruction for the bot
conversation = [{"role": "system", "content": "You are an assistant."}]

def ask_question(inputquestion):
    # Append the user's question to the conversation array
    conversation.append({"role": "user","content": inputquestion})

    # Request gpt-3.5-turbo for chat completion or a response
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=conversation
    )

    # Access the response from the API to display it
    assistant_response = response.choices[0].message.content
    
    return assistant_response

```

:::

## Update conversation chatbot function
<br>


### Add API key as input parameter to the function



```{python}
#| code-line-numbers: "|1-3|5|7-8|10|10-12|10-15|10-21|10-24|10-26"
from openai import OpenAI
import os
import dotenv

dotenv.load_dotenv()

# Create an instruction for the bot
conversation = [{"role": "system", "content": "You are an assistant."}]

def ask_question(inputquestion, api_key):
    # Initialize the OpenAI client with the provided API key
    client = OpenAI(api_key=api_key)

    # Append the user's question to the conversation array
    conversation.append({"role": "user", "content": inputquestion})

    # Request gpt-3.5-turbo for chat completion or a response
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=conversation
    )

    # Access the response from the API to display it
    assistant_response = response.choices[0].message.content

    return assistant_response

```


## Update conversation chatbot function
<br>

### Test the function

::: {.fragment}

```{python}
ask_question(
    "Where is the moon?"
)
```
:::


::: {.fragment}

:::{.callout-warning title="Error"}
TypeError: ask_question() missing 1 required positional argument: 'api_key'
:::

:::

::: {.fragment}

```{python}
ask_question(
    "Where is the moon?", 
    os.getenv('OPENAI_API_KEY')
)
```
:::


::: {.fragment}

:::{.callout-tip title="function output"}
"The moon is currently in the sky, orbiting around Earth. Its exact position in the sky will depend on your location and the current time. If you are looking for more specific information about the moon's position, you can use a stargazing app or website to track its location in real-time."
:::

:::


## Update the app for API key input

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "|10-11"
from shiny import App, render, ui, reactive
import conversationchatbot  

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
        # Click the button to add the API key
        ui.card(ui.input_action_button("apikey", "Enter OpenAI API Key to get started", class_="btn-warning")), 
        # Text input for user to enter their question
        ui.input_text("question_input", "Please enter your question and press 'Send':", width="100%"),
        # Button to send the question
        ui.input_action_button("send_button", "Send", class_="btn-primary"), 
        # Card to display the answer
        ui.card(
            ui.output_text("answer_output", inline=True),
            style="white-space: pre-wrap; width: 100%; margin: 3; padding: 10px;"
        )   
    )
)

def server(input, output, session):
    # Define the output for the answer
    @output
    @render.text
    @reactive.event(input.send_button, ignore_none=False)
    def answer_output():
        # Get the user's question from the input
        question = input.question_input()
        if question:
            # Get the response from the conversational AI model using the provided API key
            response = conversationchatbot.ask_question(question)
            return response
        else:
            # Return placeholder text if no question is entered
            return "....."

app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](images/shinyenterapikeybutton.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::


## Update the app for API key input

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "11-12"
from shiny import App, render, ui, reactive
import conversationchatbot  

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
        # Click the button to add the API key
        ui.card(ui.input_action_button("apikey", "Enter OpenAI API Key to get started", class_="btn-warning")), 
        # Text input for user to enter their question
        ui.input_text("question_input", "Please enter your question and press 'Send':", width="100%"),
        # Button to send the question
        ui.input_action_button("send_button", "Send", class_="btn-primary"), 
        # Card to display the answer
        ui.card(
            ui.output_text("answer_output", inline=True),
            style="white-space: pre-wrap; width: 100%; margin: 3; padding: 10px;"
        )   
    )
)

def server(input, output, session):
    # Define the output for the answer
    @output
    @render.text
    @reactive.event(input.send_button, ignore_none=False)
    def answer_output():
        # Get the user's question from the input
        question = input.question_input()
        if question:
            # Get the response from the conversational AI model using the provided API key
            response = conversationchatbot.ask_question(question)
            return response
        else:
            # Return placeholder text if no question is entered
            return "....."

app = App(app_ui, server)


```
:::

::: {.column width="50%"}

<br>
![](images/shinyapikeymissing.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## Clean up the API key error

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "|18|29|29-31|29-39|29-42"
from shiny import App, render, ui, reactive
import conversationchatbot  

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
        # Click the button to add the API key
        ui.card(ui.input_action_button("apikey", "Enter OpenAI API Key to get started", class_="btn-warning")), 
        # Text input for user to enter their question
        ui.input_text("question_input", "Please enter your question and press 'Send':", width="100%"),
        # Button to send the question
        ui.input_action_button("send_button", "Send", class_="btn-primary"), 
        # Card to display the answer
        ui.card(
            ui.output_text("answer_output", inline=True),
            style="white-space: pre-wrap; width: 100%; margin: 3; padding: 10px;"
        )   
    )
)

def server(input, output, session):
    # Define the output for the answer
    @output
    @render.text
    @reactive.event(input.send_button, ignore_none=False)
    def answer_output():
        # Get the user's question from the input
        question = input.question_input()
        if question:
            # Check if the API key has been provided
            if not input.apikey(): 
                return "Please input your OpenAI API key"
            else: 
                # Get the response from the conversational AI model using the provided API key
                response = conversationchatbot.ask_question(question, api_key=input.password())
                return response
        else:
            # Return placeholder text if no question is entered
            return "....."

app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](images/shinyapikeymissingclean.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::


## Create a modal for user to input API key

::: columns
::: {.column width="50%"}
<br>

```{python}
#| code-line-numbers: "|10-11|25-27|25-28|25-29|25-31|25-33|25-36|25-37|25-43"
from shiny import App, render, ui, reactive
import conversationchatbot  

app_ui = ui.page_fillable(
    ui.page_auto(
        # Title of the application
        ui.h1("Shiny Web Application Chatbot", style="font-family: Arial, sans-serif; color: #0078B8; text-shadow: 2px 2px 4px #000000; font-size: 2.7em; text-align: center; padding: 20px;"),
        # Description of the application
        ui.markdown("This application allows you to ask questions and get answers using a conversational AI model."),
        # Click the button to add the API key
        ui.card(ui.input_action_button("apikey", "Enter OpenAI API Key to get started", class_="btn-warning")), 
        # Text input for user to enter their question
        ui.input_text("question_input", "Please enter your question and press 'Send':", width="100%"),
        # Button to send the question
        ui.input_action_button("send_button", "Send", class_="btn-primary"), 
        # Card to display the answer
        ui.card(
            ui.output_text("answer_output", inline=True),
            style="white-space: pre-wrap; width: 100%; margin: 3; padding: 10px;"
        )   
    )
)

def server(input, output, session):
    # Display a modal for API key input when the 'apikey' input is triggered
    @reactive.effect
    @reactive.event(input.apikey)
    def _():
        m = ui.modal(  
            # Input field for the OpenAI API key
            ui.input_password("password", "OpenAI API key:"),
            # Button to connect to OpenAI
            ui.input_action_button("connect", "Connect to OpenAI"),
            easy_close=True,  
            footer=None,  
        )  
        ui.modal_show(m)  # Show the modal
        
    # Remove the modal when the 'connect' button is pressed
    @reactive.effect  
    @reactive.event(input.connect)  
    def __():  
        ui.modal_remove()  # Hide the modal
    
    # Define the output for the answer
    @output
    @render.text
    @reactive.event(input.send_button, ignore_none=False)
    def answer_output():
        # Get the user's question from the input
        question = input.question_input()
        if question:
            # Check if the API key has been provided
            if not input.apikey(): 
                return "Please input your OpenAI API key"
            else: 
                # Get the response from the conversational AI model using the provided API key
                response = conversationchatbot.ask_question(question, api_key=input.password())
                return response
        else:
            # Return placeholder text if no question is entered
            return "....."

app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](images/shinyapikeymodalexit_gif.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## I know that was a lot of information!!!

<br>

![](images/taylorscreaming.gif){width="100%" fig-align="center" fig-alt="TSwift screaming"}

# There is more you can do with chatbots to make them relevant to your Shiny app documentation

# Retrieval Augmented Generation (RAG)

## Diagram try

```{mermaid}
%%| label: fig-mermaid
%%| fig-width: 6
%%| fig-cap: |
%%|   How Quarto orchestrates rendering of documents: start with 
%%|   a qmd file, use the Knitr or Jupyter engine to perform the 
%%|   computations and convert it to an md file, then use Pandoc 
%%|   to convert to various file formats including HTML, PDF, 
%%|   and Word.
flowchart LR
  A[qmd] --> B(Knitr)
  A[qmd] --> C(Jupyter)
  B(Knitr) --> D[md]
  C(Jupyter) --> D[md]
  D[md] --> E(pandoc)
  E(pandoc) --> F(HTML)
  E(pandoc) --> G(PDF)
  E(pandoc) --> H(Word)
  E(pandoc) --> I{and more}

```



## Resources

-   **Everything related to this presentation**
    -   [Short Link to presentation - https://bit.ly/shinyforpythonslides](https://bit.ly/shinyforpythonslides)
    -   [Shiny code](https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/)
    -   ["Who is the Goodest Doggy" App]()
-   **Additional Peeps, resources and events to follow**
    -   [Gordon Shotwell](https://www.linkedin.com/in/gshotwell/)
    -   [Upcoming Shiny Express webinar by Winston Chang](https://www.linkedin.com/posts/rachaeldempsey_were-so-excited-to-share-a-quicker-and-simpler-activity-7166453499340259328-__Me?utm_source=share&utm_medium=member_desktop)
    -   [Shiny for python documentation](https://shiny.posit.co/py/docs/overview.html)
    -   [Deploying Shiny for Python application](https://shiny.posit.co/py/docs/deploy.html)

## Let's connect

::: columns
::: {.column width="50%"}

Mastodon: [\@deepsha](https://fosstodon.org/@deepsha)

LinkedIn: [deepshamenghani](https://bit.ly/deepshamenghani)

Github: [deepshamenghani](https://github.com/deepshamenghani/)

<br> 

### Github repo qr code
[![](images/bit.ly_chatbot_shiny_python.png){style="max-" fig-alt="QR code to slides." fig-align="left" height="300"}](https://bit.ly/chatbot_shiny_python)
:::

::: {.column width="50%"}
![](images/DeepshaMenghani.png){height="600"}
:::
:::

